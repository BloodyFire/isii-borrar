@using PortatilesAPI;

@inject swaggerClient swaggerClient;

@* Especifica la ruta en la que se mostrará esta página. *@
@page "/portatiles/createpedido"

@* Inyectar el servicio que gestiona el estado de la pedido (debe ser añadido en Program.cs). *@
@inject ReabastecerPortatilStateContainer estadoPedido;
@* Se inyecta el servicio que gestiona la navegación entre páginas (debe ser añadido en Program.cs). *@
@inject NavigationManager Navigation;



<h3>Introduce los datos del Pedido</h3>
@* https://getbootstrap.com/docs/4.0/components/input-group/ *@
@* input-group permite personalizar los controles para introducir datos. *@
<div class="input-group">
    @* Etiqueta que aparece para el filtro. *@
    @* Filtro de texto para nombre. *@
    <div class="input-group-prepend">
        <span class="input-group-text" id="">Método de Pago</span>
        <select class="form-select" aria-label="Default select" @bind="metodoPagoSeleccionado">
            @foreach (string metodo in metodosPago)
            {
                <option value="@metodo" id="metodoPagoSeleccionado_@metodo" @onclick="@(() => ActualizarMetodoPago())">
                    @metodo
                </option>
            }
        </select>
    </div>
</div> <!-- FIN INPUT-GROUP -->
<!-- TABLA CON LA LISTA DE ARTÍCULOS -->
@* Flujo alternativo cuando no hay elementos que mostrar. *@
@if (Portatiles == null || Portatiles.Count() == 0)
{
    <br />
    <p><em>No hay portátiles que cumplan los criterios seleccionados.</em></p>
}
else
{  @* Flujo básico y alternativo cuando se filtra. *@
    <div class="mh-100 table-responsive">
        <table class="table table-condensed table-hover" id="TablaPortatiles">
            <thead>
                <tr>
                    <th>Modelo</th>
                    <th>PrecioUnitario</th>
                    <th>Cantidad</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var portatil in Portatiles)
                {
                    <tr id="PortatilData_@portatil.PortatilID">
                        <td>@portatil.Modelo</td>
                        <td>@portatil.PrecioUnitario</td>
                        <td>
                            <input type="number" id="cantidad_@portatil.PortatilID" value="@portatil.Cantidad"
                            @onchange="@((value)=>ActualizaCantidad(portatil.PortatilID, value))" />
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="2" align="left">
                        @* Botón para navegar introducción de datos. *@
                        <div class="col-md">
                            <div class="form-floating">
                                @*this button will be disabled if there are no movies in the shopping cart*@
                                <button class="btn btn-primary" type="submit" id="Volver" @onclick="@(()=>Volver())">
                                    Volver
                                </button>
                            </div>
                        </div>
                    </td>
                    <td colspan="3" align="right">
                        @* Botón para navegar introducción de datos. *@
                        <div class="col-md">
                            <div class="form-floating">
                                @*this button will be disabled if there are no movies in the shopping cart*@
                                <button class="btn btn-primary" type="submit" id="Pedidor" disabled="@completarButtonDisabled" @onclick="@(()=>CreatePedido())">
                                    Pedidor
                                </button>
                            </div>
                        </div>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
    <!-- FIN TABLA CON LA LISTA DE ARTÍCULOS -->
}
@if (!mensajeError.Equals(""))
{
    <div class="card-header">
        @tituloError
    </div>
    <div class="alert alert-danger">
        @mensajeError
    </div>
}


@code {
    @* Se usa para almacenar el mensaje de error cuando lo hay. *@
    private string mensajeError = "";
    @* Es el título de la pantalla de error. *@
    private string tituloError = "Error";

    @* Se usa para controlar si el botón de completar pedidor está activo o no. *@
    private bool completarButtonDisabled = false;

    @* Para la lista de portátil que se muestra en la tabla. *@
    private ICollection<LineaPedidoDTO> Portatiles { get; set; } =
                                                    new List<LineaPedidoDTO>();
    @* Lista con los métodos de pago extraída del tipo enumerado. *@
    private ICollection<string> metodosPago =
            ((IEnumerable<OneHope.Shared.TipoMetodoPago>)Enum.GetValues(typeof(OneHope.Shared.TipoMetodoPago)))
            .Select(m => m.ToString()).ToList();

    @* Por defecto el método de pago selecionado es Tarjeta. *@
    private string metodoPagoSeleccionado = "TarjetaCredito";

    @* Detalles de la factura creada. *@
    private DetallePedidoDTO details;

    // Se ejecutará al cargarse la página.
    protected override async Task OnInitializedAsync()
    {
        @* Cargar los datos de los portátiles que incluye la pedido. *@
        BuscarPortatiles();
        bool parsed = Enum.TryParse(metodoPagoSeleccionado, out TipoMetodoPago metodoPago);
        if (parsed) estadoPedido.Pedido.TipoMetodoPago = metodoPago;
        else estadoPedido.Pedido.TipoMetodoPago = TipoMetodoPago.TarjetaCredito;
    }

    @* Cada vez que se seleciona un método de pago en el desplegable se actualiza la pedido. *@
    private void ActualizarMetodoPago()
    {
        bool parsed = Enum.TryParse(metodoPagoSeleccionado, out TipoMetodoPago metodoPago);
        if (parsed) estadoPedido.Pedido.TipoMetodoPago = metodoPago;
        else estadoPedido.Pedido.TipoMetodoPago = TipoMetodoPago.TarjetaCredito;
    }

    // Hacer el filtro.
    protected async void BuscarPortatiles()
    {
        Portatiles = estadoPedido.Pedido.LineasPedido;

        @* Se indica que los datos han cambiado y por lo tanto la IU se debe actualizar. *@
        StateHasChanged();
    }

    @* Crear la pedido y navegar a detalles. *@
    private async Task CreatePedido()
    {


        @* Gestión de errores con try/catch: si no devuelve Ok devolverá una excepción. *@
        @* Realmente las situaciones que hacen que se devuelve BadRequest al crear la pedido
           no son posibles porque lo evitamos en la vista. *@
        try
        {
            @* Primero guardo la pedido llamando al método create del controlador. *@
            details = await swaggerClient.CreatePedidoAsync(estadoPedido.Pedido);
            @* Borrar el carrito *@
            estadoPedido.FinalizarPedido();

            Navigation.NavigateTo($"/pedido/detalle?PedidoId={details.Id}");
        }
        catch (ApiException<ValidationProblemDetails> apiexceptionvalidation)
        {
            @* Este es el título de la sección de errores que deseamos. *@
            tituloError = "Ha habido un problema al procesar tu pedido.";

            if (apiexceptionvalidation.Result.Errors.Values != null)
            {
                mensajeError = "";
                foreach (var errors in apiexceptionvalidation.Result.Errors.Values)
                    //https://learn.microsoft.com/en-us/dotnet/api/system.string.join?view=net-7.0
                    mensajeError = string.Join("(*) ", mensajeError, string.Join(" (*) ", errors));
            }
            @* Se indica que los datos han cambiado y por lo tanto la IU se debe actualizar. *@
            StateHasChanged();
        }
        catch (ApiException apiexception)
        {
            @* Este es el título de la sección de errores que deseamos. *@
            tituloError = "Ha habido un problema al procesar tu pedido.";
            mensajeError = "Por favor,inténtalo más tarde.";
            @* Se indica que los datos han cambiado y por lo tanto la IU se debe actualizar. *@
            StateHasChanged();
        }
    }

    @* Volver a la pantalla anterior conservando los datos para poder modificar la pedido. *@
    private void Volver()
    {
        Navigation.NavigateTo("/portatiles/pedidor");
    }

    @* Actualiza la cantidad del portátil en el carrito. *@
    private void ActualizaCantidad(int id, ChangeEventArgs args)
    {
        int cantidad = (int)Int32.Parse((string)args.Value);

        if (cantidad != null)
            estadoPedido.UpdateCarrito(id, cantidad);

        @* Si hay algún portátil con cantidad 0 no se activa el botón de finalizar la pedido. *@
        completarButtonDisabled = (estadoPedido.Pedido.LineasPedido.Any(li => li.Cantidad == 0) ? true : false);
    }

}
