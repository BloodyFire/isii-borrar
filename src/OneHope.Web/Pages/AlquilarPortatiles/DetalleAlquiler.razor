@* Especifica la ruta en la que se mostrará esta página. *@
@page "/portatiles/alquiler/detalle"

@* Espacio de nombres del cliente generado con NSwag. *@
@using PortatilesAPI;
@* Espacio de nombres donde están los DTOs. *@

@* Este es el servicio que se ha definido como HttpClient en Program.cs. *@
@inject swaggerClient swaggerClient;

@* Se inyecta el servicio que gestiona la navegación entre páginas (debe ser añadido en Program.cs). *@
@inject NavigationManager Navigation;

<h3>Resumen del Alquiler</h3>

@if (!mensajeError.Equals("")) {
    <div class="card-header">
        @tituloError
    </div>
    <div class="alert alert-danger">
        @mensajeError
    </div>
} else {

@* https://getbootstrap.com/docs/4.0/components/input-group/ *@
@* input-group permite personalizar los controles para introducir datos. *@
<div class="input-group">
    <div class="input-group-prepend">
        <span class="input-group-text" id="nombre-cliente"><b>Nombre Cliente: </b> @(alquiler.NombreCliente)</span>
        <span class="input-group-text" id="apellidos-cliente"><b>Apellidos Cliente: </b> @(alquiler.ApellidosCliente)</span>
        <span class="input-group-text" id="direccion-cliente"><b>Direccion: </b> @(alquiler.Direccion)</span>
        <span class="input-group-text" id="metodo-pago"><b>Método de Pago: </b> @(alquiler.TipoMetodoPago)</span>
        <span class="input-group-text" id="fecha-alquiler"><b>Fecha de alquiler: </b> @(alquiler.FechaAlquiler.ToString("dd-MMM-yyyy HH").ToUpper())</span>
        <span class="input-group-text" id="fechaIn-alquiler"><b>Fecha Inicio de alquiler: </b> @(alquiler.FechaInAlquiler.ToString("dd-MMM-yyyy").ToUpper())</span>
        <span class="input-group-text" id="fechaFin-alquiler"><b>Fecha Final de alquiler: </b> @(alquiler.FechaFinAlquiler.ToString("dd-MMM-yyyy").ToUpper())</span>
    </div>
</div> <!-- FIN INPUT-GROUP -->
<!-- TABLA CON LA LISTA DE ARTÍCULOS ALQUILADOS -->
@if (Portatiles == null || Portatiles.Count() == 0) {
    <br />
    <p><em>No hay artículos que cumplan los criterios seleccionados.</em></p>
} else {  
    <div class="mh-100 table-responsive">
        <table class="table table-condensed table-hover" id="TablaPortatiles">
            <thead>
                <tr>
                    <th>Modelo</th>
                    <th>Marca</th>
                    <th>Cantidad</th>
                    <th>PVP</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var portatil in Portatiles) {
                    <tr id="PortatilData_@portatil.PortatilID">
                        <td>@portatil.Modelo</td>
                        <td>@portatil.Marca</td>
                        <td>@portatil.PrecioAlquiler</td>
                        <td>@portatil.Cantidad</td>

                    </tr>
                }
                
            </tbody>
            <tfoot><tr><td /><td /><td><em>Precio Alquiler Total</em></td><td>@alquiler.Total</td></tr></tfoot>
        </table>
    </div>
    <!-- FIN TABLA CON LA LISTA DE ARTÍCULOS -->
}

}

@* Botón para navegar de nuevo al inicio. *@
<div class="col-md">
    <div class="form-floating">
        <button class="btn btn-primary" type="submit" id="Submit" @onclick="@(()=>NavegarInicio())">
            Finalizar
        </button>
    </div>
</div>


@code {
    @* Este es id del alquiler a mostrar que se pasa en el parámetro que se le pasa a la página. *@
    [Parameter]
    [SupplyParameterFromQuery]
    public int AlquilerId { get; set; }

    @* Se usa para almacenar el mensaje de error cuando lo hay. *@
    private string mensajeError = "";
    @* Es el título de la pantalla de error. *@
    private string tituloError = "Error";

    @* Para la lista de artículo que se muestra en la tabla. *@
    private ICollection<LineaAlquilerDTO> Portatiles { get; set; } =
                                                    new List<LineaAlquilerDTO>();

    private DetalleAlquilerDTO alquiler = new DetalleAlquilerDTO();

    @* Navegar a la página de inicio. *@
    private void NavegarInicio() {
        @* Volver al inicio. *@
        Navigation.NavigateTo("/portatiles/alquilar");
    }

    // Se ejecutará al cargarse la página.
    protected override async Task OnInitializedAsync() {
        @* Cargar los datos de los artículos. *@
        try {
        alquiler = await swaggerClient.GetAlquilerAsync(AlquilerId);
        Portatiles = alquiler.LineasAlquiler;
        } catch (ApiException<ValidationProblemDetails> apiexceptionvalidation) {
            @* Este es el título de la sección de errores que deseamos. *@
            tituloError = "Error: no se pueden mostrar los detalles del alquiler.";

            if (apiexceptionvalidation.Result.Errors.Values != null) {
                mensajeError = "";
                foreach (var errors in apiexceptionvalidation.Result.Errors.Values)
                    //https://learn.microsoft.com/en-us/dotnet/api/system.string.join?view=net-7.0
                    mensajeError = string.Join("(*) ", mensajeError, string.Join(" (*) ", errors));
            }
            @* Se indica que los datos han cambiado y por lo tanto la IU se debe actualizar. *@
            StateHasChanged();
        } catch (ApiException apiexception) {
            @* Este es el título de la sección de errores que deseamos. *@
            tituloError = "Error";
            mensajeError = $"No se pueden mostrar los detalles del alquiler cuyo id es: {AlquilerId}.";
            @* Se indica que los datos han cambiado y por lo tanto la IU se debe actualizar. *@
            StateHasChanged();
        }
    }
}
