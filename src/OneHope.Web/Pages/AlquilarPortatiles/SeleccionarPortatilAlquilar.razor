@using PortatilesAPI;

@inject swaggerClient swaggerClient;

@* Especifica la ruta en la que se mostrará esta página. *@
@page "/portatiles/alquilar"

<h3>SeleccionarPortatilAlquilar</h3>

@* input-group permite personalizar los controles para introducir datos. *@
<div class="input-group">
    @* Etiqueta que aparece para el filtro. *@
    @* Filtro de texto para modelo. *@
    <div class="input-group-prepend">
        <span class="input-group-text" id="">Modelo</span>
    </div>
    <input type="text" class="form-control" @bind="portatilModelo" id="portatilModelo">
    @* Etiqueta que aparece para el filtro. *@
    @* Filtro de selección para marca. *@
    <div class="input-group-prepend">
        <span class="input-group-text" id="">Marca</span>
    </div>
    @*<input type="text" class="form-control" @bind="@portatilMarca" id="portatilMarca">*@
    <select class="form-select" aria-label="Default select" @bind="portatilMarcaSeleccionada">
        <option value="Todos" selected @onclick="@BuscarPortatiles">Todos</option>
        @foreach (string nombreMarca in nombreMarcas)
        {
            <option value="@nombreMarca" @onclick="@BuscarPortatiles" id="portatilMarcaSeleccionada_@nombreMarca">@nombreMarca</option>
        }
    </select>
    @* Añade el botón para buscar. *@
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" id="buscarPortatiles" @onclick="@BuscarPortatiles">Buscar</button>
    </div>
</div> <!-- FIN INPUT-GROUP -->

<!-- TABLA CON LA LISTA DE ARTÍCULOS -->
@* Flujo alternativo cuando no hay elementos que mostrar. *@
@if (Portatiles == null || Portatiles.Count() == 0)
{
    <br />
    <p><em>No hay portátiles que cumplan los criterios seleccionados.</em></p>
}
else
{  @* Flujo básico y alternativo cuando se filtra. *@
    <div class="mh-100 table-responsive">
        <table class="table table-condensed table-hover" id="TableOfMovies">
            <thead>
                <tr>
                    <th>Modelo</th>
                    <th>Marca</th>
                    <th>Procesador</th>
                    <th>RAM</th>
                    <th>Precio</th>
                    <th align="center">Seleccionado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var portatil in Portatiles)
                {
                    <tr id="PortatilData_@portatil.Id">
                        <td>@portatil.Modelo</td>
                        <td>@portatil.Marca</td>
                        <td>@portatil.Procesador</td>
                        <td>@portatil.Ram</td>
                        <td>@portatil.PrecioAlquiler</td>
                        <td align="center">
                            <input type="checkbox" id="articuloCompra_@portatil.Id">
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="5" align="right">
                        @* Botón para navegar introducción de datos. *@
                        <div class="col-md">
                            <div class="form-floating">
                                @*this button will be disabled if there are no movies in the shopping cart*@
                                <button class="btn btn-primary" type="submit" id="Submit">
                                    Alquilar
                                </button>
                            </div>
                        </div>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
    <!-- FIN TABLA CON LA LISTA DE ARTÍCULOS -->
}


@code {
    @* Define variables necesarias para enlazar los datos que se manejan en la IU con tu código de manera sencilla (binding). *@
    @* En este ejemplo necesito variables para mis dos filtros. *@
    private string portatilModelo;
    private string portatilMarcaSeleccionada;

    private ICollection<string> nombreMarcas { get; set; }
                    = new List<string>(); 

    private ICollection<PortatilParaAlquilerDTO>
                Portatiles { get; set; } =
                            new List<PortatilParaAlquilerDTO>();


    // Se ejecutará al cargarse la página.
    protected override async Task OnInitializedAsync()
    {
        portatilMarca = portatilMarcaSeleccionada 
        @* Cargar los datos de los artículos. *@
        BuscarPortatiles();

    }

    // Hacer el filtro.
    protected async void BuscarPortatiles()
    {

        Portatiles = await swaggerClient.GetPortatilesParaAlquilerAsync(null, null, null, portatilModelo);

        @* Se indica que los datos han cambiado y por lo tanto la IU se debe actualizar. *@
        StateHasChanged();
    }

}
